create table if not exists movies
(
    id         int auto_increment
        primary key,
    movie_name varchar(50)                 not null,
    added_date timestamp default curtime() not null,
    url        varchar(2048)               null
);

create table if not exists screens
(
    id          int auto_increment
        primary key,
    screen_name varchar(20) not null,
    length      int         not null,
    wide        int         not null,
    capacity    int as (`wide` * `length`) stored,
    constraint screens_pk
        unique (screen_name)
);

create table if not exists schedules
(
    id         int auto_increment
        primary key,
    movie_id   int            null,
    screen_id  int            null,
    start_time timestamp      not null,
    price      decimal(10, 2) not null,
    constraint schedules_movies_id_fk
        foreign key (movie_id) references movies (id),
    constraint schedules_screens_id_fk
        foreign key (screen_id) references screens (id)
);

create definer = root@localhost trigger if not exists after_insert_schedule
    after insert
    on schedules
    for each row
BEGIN
    CALL insert_schedule_seats(NEW.id, NEW.screen_id);
END;

create table if not exists seats
(
    schedule_id  int                  not null,
    seat_number  int                  not null,
    is_avaliable tinyint(1) default 1 null,
    primary key (seat_number, schedule_id),
    constraint schedules_seats_schedules_id_fk
        foreign key (schedule_id) references schedules (id)
);

create table if not exists users
(
    id                 int auto_increment
        primary key,
    email              varchar(50)  not null,
    password           varchar(255) not null,
    payment_method     varchar(50)  null,
    card_number        varchar(19)  null,
    member_expire_date timestamp    null,
    constraint users_pk
        unique (email)
);

create table if not exists payments
(
    id                int auto_increment
        primary key,
    user_id           int                              null,
    schedule_id       int                              null,
    seat_number       int                              null,
    payment_time      timestamp      default curtime() not null,
    payment_method    varchar(50)                      not null,
    card_number       varchar(19)                      null,
    credit_spent      decimal(10, 2) default 0.00      not null invisible,
    money_spent       decimal(10, 2) default 0.00      not null,
    is_cancelled      tinyint(1)     default 0         not null,
    cancellation_date timestamp                        null,
    constraint orders_users_id_fk
        foreign key (user_id) references users (id),
    constraint transactions_schedules_seats_schedule_id_seat_number_fk
        foreign key (schedule_id, seat_number) references seats (schedule_id, seat_number)
);

create table if not exists credits_refund
(
    payment_id     int            not null
        primary key,
    credits_refund decimal(10, 2) null,
    expire_date    timestamp      not null,
    constraint credits_refund___fk
        foreign key (payment_id) references payments (id)
);

create
    definer = root@localhost procedure insert_schedule_seats(IN p_schedule_id int, IN p_screen_id int)
BEGIN
    DECLARE i INT DEFAULT 1;
    DECLARE screen_capacity INT;

    SELECT capacity INTO screen_capacity FROM screens WHERE id = p_screen_id;

    WHILE i <= screen_capacity DO
        INSERT INTO seats (schedule_id, seat_number)
        VALUES (p_schedule_id, i);
        SET i = i + 1;
    END WHILE;
END;

